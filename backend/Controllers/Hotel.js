const Joi = require('joi');
const validator = require('validator');
const bcrypt = require('bcrypt');
const Hotel = require("../Models/Hotels");
const rateLimit = require('express-rate-limit');
const HotelLogin = require("../Models/hotelLogin");
const HotelRoom = require("../Models/hotelRoom");

// Schema for validating hotel login inputs
const hotelLoginSchema = Joi.object({
  hotelRegNo: Joi.string().alphanum().required(),
  password: Joi.string().min(8).max(30).required(),
});

// Schema for validating hotel details
const hotelSchema = Joi.object({
  registrarNum: Joi.string().alphanum().required(),
  name: Joi.string().required(),
  location: Joi.string().required(),
  rating: Joi.number().min(0).max(5),
});

// Schema for adding room
const roomSchema = Joi.object({
  roomType: Joi.string().required(),
  price: Joi.number().required(),
  registrarNum: Joi.string().alphanum().required(),
});

// Input validation function
const validateInput = (schema, data) => {
  const { error } = schema.validate(data);
  return error;
};

// Create Hotel Login with password hashing and input validation
const createHotelLogin = async (req, res) => {
  try {
    const validationError = validateInput(hotelLoginSchema, req.body);
    if (validationError) {
      return res.status(400).json({ msg: validationError.details[0].message });
    }

    const { password, ...hotelLoginDetails } = req.body;

    // Hash the password before saving
    const hashedPassword = await bcrypt.hash(password, 10);
    const hotelLogin = await HotelLogin.create({ ...hotelLoginDetails, password: hashedPassword });
    res.status(200).json({ hotelLogin });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// View Hotel Details with validation
const viewHotelDetails = async (req, res) => {
  try {
    const { registrarNum } = req.params;

    if (!validator.isAlphanumeric(registrarNum)) {
      return res.status(400).json({ msg: 'Invalid registrar number format' });
    }

    const hotelDetails = await Hotel.findOne({ registrarNum });
    if (hotelDetails) {
      res.status(200).json({ hotelDetails });
    } else {
      res.status(404).json({ msg: 'No hotel with that ID' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update Hotel with input validation
const updateHotel = async (req, res) => {
  try {
    const { registrarNum } = req.params;

    if (!validator.isAlphanumeric(registrarNum)) {
      return res.status(400).json({ msg: 'Invalid registrar number format' });
    }

    const validationError = validateInput(hotelSchema, req.body);
    if (validationError) {
      return res.status(400).json({ msg: validationError.details[0].message });
    }

    const updatedHotelDetail = await Hotel.findOneAndUpdate({ registrarNum }, req.body, {
      new: true,
      runValidators: true,
    });

    if (updatedHotelDetail) {
      res.status(200).json(updatedHotelDetail);
    } else {
      res.status(404).json({ msg: 'Update unsuccessful' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Add Hotel Room with validation
const addHotelRoom = async (req, res) => {
  try {
    const validationError = validateInput(roomSchema, req.body);
    if (validationError) {
      return res.status(400).json({ msg: validationError.details[0].message });
    }

    const addHotelRoom = await HotelRoom.create(req.body);
    if (addHotelRoom) {
      res.status(200).json({ addHotelRoom });
    } else {
      res.status(404).json({ msg: 'Room addition was unsuccessful. Try again.' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Delete Hotel Account
const deleteAccount = async (req, res) => {
  try {
    const { registrarNum } = req.params;

    if (!validator.isAlphanumeric(registrarNum)) {
      return res.status(400).json({ msg: 'Invalid registrar number format' });
    }

    const deleteHotel = await Hotel.findOneAndDelete({ registrarNum });

    if (deleteHotel) {
      res.status(200).json(deleteHotel);
    } else {
      res.status(404).json({ msg: 'No hotel with that register number' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};


const lockDuration = 30 * 60 * 1000; // Lock account for 30 minutes
const maxFailedAttempts = 3; // Set max failed attempts before lock

// In-memory store for tracking login attempts (optional for simplicity in testing)
const loginAttempts = {};

const validatePassword = async (req, res) => {
  const { hotelRegNo, password } = req.body;

  try {
    // Find the hotel login entry by registration number
    const hotelLogin = await HotelLogin.findOne({ hotelRegNo });
    
    if (!hotelLogin) {
      return res.status(404).json({ msg: 'No hotel with that registration number' });
    }

    // Check if the account is locked and if the lock time has not expired
    if (hotelLogin.isLocked && new Date() < hotelLogin.lockUntil) {
      const lockTimeRemaining = Math.ceil((hotelLogin.lockUntil - new Date()) / (60 * 1000)); // Time remaining in minutes
      return res.status(403).json({
        msg: `Account is locked due to too many failed login attempts. Try again in ${lockTimeRemaining} minutes.`,
      });
    }

    // Check if the password is correct
    const isPasswordValid = await bcrypt.compare(password, hotelLogin.password);

    if (isPasswordValid) {
      // Reset failed login attempts and unlock the account after a successful login
      hotelLogin.failedLoginAttempts = 0;
      hotelLogin.isLocked = false;
      hotelLogin.lockUntil = undefined;
      await hotelLogin.save();

      return res.status(200).json({ hotelLogin });
    } else {
      // Increment the failed login attempts
      hotelLogin.failedLoginAttempts += 1;

      // Lock the account if too many failed attempts
      if (hotelLogin.failedLoginAttempts > maxFailedAttempts) {
        hotelLogin.isLocked = true;
        hotelLogin.lockUntil = new Date(Date.now() + lockDuration); // Lock for 30 minutes
        await hotelLogin.save();
        return res.status(403).json({
          msg: 'Too many failed login attempts. Your account is now locked for 30 minutes.',
        });
      }

      // Save the updated failed login attempts
      await hotelLogin.save();
      return res.status(401).json({ msg: 'Username or password was incorrect' });
    }
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};




module.exports = {
  createHotelLogin,
  validatePassword,
  viewHotelDetails,
  updateHotel,
  deleteAccount,
  addHotelRoom,
  
};
