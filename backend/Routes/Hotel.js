const express = require("express");
const router = express.Router();
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const Hotel = require("../Models/Hotels");
const {
  createHotelLogin,
  validatePassword,
  viewHotelDetails,
  updateHotel,
  deleteAccount,
  addHotelRoom,
} = require("../Controllers/Hotel");

// 1. Security Vulnerability: Unrestricted File Upload
//    Prevention: Limit file types to only allow image files (e.g., JPEG, PNG)
//    Reason: To prevent attackers from uploading executable scripts or other harmful files

const fileFilter = (req, file, cb) => {
  const allowedMimeTypes = ["image/jpeg", "image/png", "image/jpg"];
  if (allowedMimeTypes.includes(file.mimetype)) {
    cb(null, true); // Accept file
  } else {
    cb(
      new Error("Invalid file type. Only JPEG, PNG files are allowed."),
      false
    ); // Reject file
  }
};

// 2. Security Vulnerability: Large File Upload (DoS Attack)
//    Prevention: Set a file size limit to prevent denial of service (DoS) attacks by uploading excessively large files
//    Reason: Large files can overwhelm the serverâ€™s memory and storage, leading to crashes

// legacy code
// const storage = multer.diskStorage({
//     destination: (req,file,callback) => {
//         callback(null,"../frontend/public/hoteluploads/");
//     },
//     filename: (req,file,callback) => {
//         callback(null,file.originalname);
//     }
// });

const upload = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      // 3. Security Vulnerability: Storing files in public directories
      //    Prevention: Store uploaded files outside the web root to prevent direct access via URL
      //    Reason: Prevent attackers from accessing files directly and ensure files are served securely
      cb(null, path.join(__dirname, "../uploads/hotelImages")); // Store files in a non-public directory
    },
    filename: (req, file, cb) => {
      // 4. Security Vulnerability: File Name Collisions and Exposure
      //    Prevention: Use a unique filename to avoid collisions (e.g., by adding a timestamp)
      //    Reason: Avoid overwriting existing files and exposing sensitive information through predictable filenames
      cb(null, Date.now() + "-" + file.originalname); // Add timestamp to the original filename
    },
  }),
  limits: { fileSize: 2 * 1024 * 1024 }, // Set file size limit to 2 MB
  fileFilter: fileFilter,
});

// 5. Security Vulnerability: Unauthenticated File Uploads
//    Prevention: Use authentication middleware to ensure only authorized users can upload files
//    Reason: Prevent unauthorized users from uploading files to your server
const authMiddleware = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) {
    return res.status(403).json("Unauthorized access");
  }

  // Verify the token here (for example, using JWT)
  // If valid, proceed; if not, reject the request
  next();
};

// File upload route

// legacy code 
// router.post("/", upload.single("hotelImg"), async (req, res) => {
//   if (!req.file) {
//     return res.status(400).json('No file uploaded');
//   }
//     const newHotel = new Hotel({
//       hotelName: req.body.hotelName,
//       registrarNum: req.body.registrarNum,
//       category: req.body.category,
//       starRate: req.body.starRate,
//       address: req.body.address,
//       contactNum: req.body.contactNum,
//       ownerName: req.body.ownerName,
//       mainCity: req.body.mainCity,
//       hotelDescription: req.body.hotelDescription,
//       hotelImg: req.file.originalname
//     });

//     newHotel
//       .save()
//       .then(()=> res.status(200).json("New hotel added succesfully"))
//       .catch((err) => res.status(400).json(`Error: ${err}`))
//   });

router.post(
  "/",
  authMiddleware,
  upload.single("hotelImg"),
  async (req, res) => {
    // 6. Security Vulnerability: No validation if file upload succeeded
    //    Prevention: Check if the file was successfully uploaded
    //    Reason: Ensure that file uploads are handled correctly
    if (!req.file) {
      return res.status(400).json("No file uploaded");
    }

    // 7. Process and save hotel details with uploaded image
    try {
      const newHotel = new Hotel({
        hotelName: req.body.hotelName,
        registrarNum: req.body.registrarNum,
        category: req.body.category,
        starRate: req.body.starRate,
        address: req.body.address,
        contactNum: req.body.contactNum,
        ownerName: req.body.ownerName,
        mainCity: req.body.mainCity,
        hotelDescription: req.body.hotelDescription,
        hotelImg: req.file.filename, // Store the unique filename in the database
      });

      await newHotel.save(); // Save the hotel details to the database
      res.status(200).json("New hotel added successfully");
    } catch (error) {
      res.status(500).json(`Error: ${error.message}`);
    }
  }
);

// Additional routes for hotel management
router.route("/createlogin").post(createHotelLogin);
router.route("/login").post(validatePassword);
router.route("/viewhotel/:registrarNum").get(viewHotelDetails);
router.route("/viewhotel/:registrarNum").patch(updateHotel);
router.route("/viewhotel/:registrarNum").delete(deleteAccount);
router.route("/viewhotel/:registrarNum").post(addHotelRoom);

module.exports = router;


// legacy code
// const express = require('express')
// const router = express.Router();
// const multer = require('multer');
// const Hotel = require('../Models/Hotels');
// const { createHotelLogin, validatePassword, viewHotelDetails, updateHotel, deleteAccount, addHotelRoom } = require('../Controllers/Hotel');

// const storage = multer.diskStorage({
//     destination: (req,file,callback) => {
//         callback(null,"../frontend/public/hoteluploads/");
//     },
//     filename: (req,file,callback) => {
//         callback(null,file.originalname);
//     }
// });

// const upload = multer({storage: storage});

// // const {viewAllHotels,createHotel} = require('../Controllers/Hotel');

// //creating routes

// // router.route('/').get(viewAllHotels)

// router.route('/createlogin').post(createHotelLogin);
// router.route('/login').post(validatePassword);
// router.route('/viewhotel/:registrarNum').get(viewHotelDetails);
// router.route('/viewhotel/:registrarNum').patch(updateHotel);
// router.route('/viewhotel/:registrarNum').delete(deleteAccount);
// router.route('/viewhotel/:registrarNum').post(addHotelRoom);

// router.post("/", upload.single("hotelImg"), async (req, res) => {
//   if (!req.file) {
//     return res.status(400).json('No file uploaded');
//   }
//     const newHotel = new Hotel({
//       hotelName: req.body.hotelName,
//       registrarNum: req.body.registrarNum,
//       category: req.body.category,
//       starRate: req.body.starRate,
//       address: req.body.address,
//       contactNum: req.body.contactNum,
//       ownerName: req.body.ownerName,
//       mainCity: req.body.mainCity,
//       hotelDescription: req.body.hotelDescription,
//       hotelImg: req.file.originalname
//     });

//     newHotel
//       .save()
//       .then(()=> res.status(200).json("New hotel added succesfully"))
//       .catch((err) => res.status(400).json(`Error: ${err}`))
//   });

// module.exports = router
