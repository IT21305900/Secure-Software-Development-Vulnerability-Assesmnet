const dotenv = require("dotenv");
dotenv.config();

const express = require("express");
const app = express();
require("dotenv").config();
const cors = require("cors");
const Hotel = require("./Routes/Hotel");
const HotelView = require("./Routes/HotelView");
const connectDB = require("./Database/Connect");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const morgan = require("morgan");
const fs = require("fs");
const path = require("path");
const Driver = require("./Routes/Driver");
const csrf = require("csrf");
const cookieParser = require("cookie-parser");

app.use(helmet());

app.use(express.json());

// 1.Security Assesment: CORS configuration

/*
before fix the cors configurations it was set to allow any orging to access
app.use(cors())
*/

const corsOptions = {
  origin: ["http://localhost:3000"], // Only allow your specified domains or trusted ones
  methods: ["GET", "POST", "PUT", "DELETE"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: true, // Allows cookies and credentials if needed
  legacyHeaders: false,
};

app.use(cors(corsOptions));

// 2. DDOS ATTACK VANURABILITY
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: "Too many requests from this IP, please try again later.",
});

// 3. LOGGING & Monitor
app.use(morgan("dev"));

// Create a write stream in append mode
var accessLogStream = fs.createWriteStream(
  path.join(__dirname, "logs/access.log"),
  { flags: "a" }
);
// setup the logger
app.use(morgan("combined", { stream: accessLogStream }));

app.use(limiter);

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      defaultSrc: ["'self'"], // Allow only the same origin
      scriptSrc: ["'self'"], // Trusted sources for scripts
      styleSrc: ["'self'"], // Avoid 'unsafe-inline' if possible
      fontSrc: ["'self'"], // Trusted sources for fonts
      imgSrc: ["'self'", "data:"], // Allow self and data URIs for images
      objectSrc: ["'none'"], // No objects or embeds
      frameAncestors: ["'self'"], // Only allow your own site to embed this content
      upgradeInsecureRequests: [], // Forces HTTP to upgrade to HTTPS
    },
  })
);

const port = 8000;

//4. CSRF protection
const csrfProtection = csrf();
const csrfSecret = csrfProtection.secretSync(); // Generate a secret

app.use((req, res, next) => {
  const csrfToken = csrfProtection.create(csrfSecret);
  res.cookie("XSRF-TOKEN", csrfToken);
  res.locals.csrfToken = csrfToken;
  next();
});

//hotel management system routes
// app.use("/", (req, res) => {
//   res.send("Welcome to the Hotel Management System");
// });
app.use("/Hotel/profile", Hotel);
app.use("/hotels", HotelView);
app.use("/driver", Driver);

//customer routes
const start = async () => {
  try {
    await connectDB(
      "mongodb+srv://isuruakalanka071:Wit7O5AphbdsGeTR@slcpdb.xs7vlgv.mongodb.net/?retryWrites=true&w=majority&appName=slcpdb"
    );
    app.listen(port, console.log("server is listning"));
  } catch (error) {
    console.log(error);
  }
};

start();
